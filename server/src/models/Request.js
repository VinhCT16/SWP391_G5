// server/src/models/Request.js
import mongoose from "mongoose";

const { Schema } = mongoose;

/** ƒê∆°n v·ªã h√†nh ch√≠nh (t·ªânh / huy·ªán / x√£) */
const AdministrativeUnitSchema = new Schema(
  {
    code: { type: String, required: true, trim: true },
    name: { type: String, required: true, trim: true },
  },
  { _id: false }
);

/** ƒê·ªãa ch·ªâ chi ti·∫øt ng∆∞·ªùi d√πng nh·∫≠p */
const AddressSchema = new Schema(
  {
    province: { type: AdministrativeUnitSchema, required: true },
    district: { type: AdministrativeUnitSchema, required: true },
    ward:     { type: AdministrativeUnitSchema, required: true },
    street:   { type: String, required: true, trim: true },
  },
  { _id: false }
);

/** ƒêi·ªÉm to·∫° ƒë·ªô GeoJSON: [lng, lat] */
const GeoPointSchema = new Schema(
  {
    type: { type: String, enum: ["Point"], required: true, default: "Point" },
    coordinates: {
      type: [Number], // [lng, lat]
      required: true,
      validate: {
        validator: (arr) => Array.isArray(arr) && arr.length === 2,
        message: "coordinates ph·∫£i l√† m·∫£ng [lng, lat]"
      }
    }
  },
  { _id: false }
);

const RequestSchema = new Schema(
  {
    orderId: { type: Schema.Types.ObjectId, ref: "Order" },

    customerName:  { type: String, required: true, immutable: true },
    customerPhone: { type: String, required: true, immutable: true },

    // ‚úÖ T√ÅCH TH√ÄNH 2 ƒê·ªäA CH·ªà & 2 TO·∫† ƒê·ªò
    pickupAddress:   { type: AddressSchema, required: true },
    pickupLocation:  { type: GeoPointSchema, default: undefined },
    deliveryAddress: { type: AddressSchema, required: true },
    deliveryLocation:{ type: GeoPointSchema, default: undefined },

    // ‚ùó Gi·ªØ l·∫°i tr∆∞·ªùng c≈© ƒë·ªÉ ƒë·ªçc t√†i li·ªáu l·ªãch s·ª≠ (DEPRECATED)
    address:  { type: AddressSchema, required: false },     // deprecated
    location: { type: GeoPointSchema, default: undefined }, // deprecated

    movingTime: { type: Date, required: true },

    serviceType: {
      type: String,
      enum: ["STANDARD", "EXPRESS"],
      default: "STANDARD",
    },

    images: [String],

    status: {
      type: String,
      enum: [
        "PENDING_REVIEW",
        "APPROVED",
        "REJECTED",
        "IN_PROGRESS",
        "DONE",
        "CANCELLED",
      ],
      default: "PENDING_REVIEW",
    },

    notes: String,

    requestDate:       { type: Date, default: Date.now },
    estimatedDelivery: { type: Date },
    actualDelivery:    { type: Date },
  },
  {
    timestamps: true,
    collection: "request",
    toJSON: { virtuals: true, getters: true },
    toObject: { virtuals: true, getters: true },
  }
);

// üëâ Backward-compat khi t√†i li·ªáu c≈© ch·ªâ c√≥ address/location
RequestSchema.virtual("pickupAddressCompat").get(function () {
  return this.pickupAddress || this.address || undefined;
});
RequestSchema.virtual("deliveryAddressCompat").get(function () {
  // N·∫øu kh√¥ng c√≥ deliveryAddress, t·∫°m th·ªùi d√πng address (c≈©) nh∆∞ c·∫£ 2 ƒë·ªÉ hi·ªÉn th·ªã
  return this.deliveryAddress || this.address || undefined;
});
RequestSchema.virtual("pickupLocationCompat").get(function () {
  return this.pickupLocation || this.location || undefined;
});
RequestSchema.virtual("deliveryLocationCompat").get(function () {
  return this.deliveryLocation || this.location || undefined;
});

// Index kh√¥ng gian cho truy v·∫•n kho·∫£ng c√°ch trong t∆∞∆°ng lai
RequestSchema.index({ pickupLocation: "2dsphere" });
RequestSchema.index({ deliveryLocation: "2dsphere" });

export default mongoose.model("Request", RequestSchema, "request");
