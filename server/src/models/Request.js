// server/src/models/Request.js
import mongoose from "mongoose";

const { Schema } = mongoose;

/** ƒê∆°n v·ªã h√†nh ch√≠nh (t·ªânh / huy·ªán / x√£) */
const AdministrativeUnitSchema = new Schema(
  {
    code: { type: String, required: true, trim: true },
    name: { type: String, required: true, trim: true },
  },
  { _id: false }
);

/** ƒê·ªãa ch·ªâ chi ti·∫øt ng∆∞·ªùi d√πng nh·∫≠p */
const AddressSchema = new Schema(
  {
    province: { type: AdministrativeUnitSchema, required: true },
    district: { type: AdministrativeUnitSchema, required: true },
    ward:     { type: AdministrativeUnitSchema, required: true },
    street:   { type: String, required: true, trim: true }, // s·ªë nh√†, t√™n ƒë∆∞·ªùng
  },
  { _id: false }
);

/** V·ªã tr√≠ (GeoJSON Point) ‚Äì b·∫Øt bu·ªôc d√πng [lng, lat] */
const GeoPointSchema = new Schema(
  {
    type:        { type: String, enum: ["Point"], default: "Point" },
    coordinates: { type: [Number], default: undefined }, // [lng, lat] ‚Äì c√≥ th·ªÉ ch∆∞a c√≥
  },
  { _id: false }
);

const RequestSchema = new Schema(
  {
    orderId: { type: Schema.Types.ObjectId, ref: "Order" },

    customerName:  { type: String, required: true, immutable: true },
    customerPhone: { type: String, required: true, immutable: true },

    // üÜï T√ÅCH ƒê·ªäA CH·ªà
    pickupAddress:   { type: AddressSchema, required: true },
    pickupLocation:  { type: GeoPointSchema, default: undefined },
    deliveryAddress: { type: AddressSchema, required: true },
    deliveryLocation:{ type: GeoPointSchema, default: undefined },

    movingTime: { type: Date, required: true },

    serviceType: {
      type: String,
      enum: ["STANDARD", "EXPRESS"], // Th∆∞·ªùng / H·ªèa t·ªëc
      default: "STANDARD",
    },

    // L∆∞u base64 (demo) ho·∫∑c URL sau n√†y ‚Äì t·ªëi ƒëa 4 ·∫£nh b√™n ph√≠a routes validate
    images: { type: [String], default: [] },

    status: {
      type: String,
      enum: [
        "PENDING_REVIEW", // ƒêang ch·ªù duy·ªát
        "APPROVED",       // ƒê√£ duy·ªát
        "REJECTED",       // B·ªã t·ª´ ch·ªëi
        "IN_PROGRESS",    // ƒêang th·ª±c hi·ªán
        "DONE",           // Ho√†n t·∫•t
        "CANCELLED",      // ƒê√£ h·ªßy
      ],
      default: "PENDING_REVIEW",
    },

    notes: String,

    // 3 field d∆∞·ªõi c√≥ th·ªÉ d√πng trong lu·ªìng nghi·ªáp v·ª• kh√°c
    requestDate:       { type: Date, default: Date.now },
    estimatedDelivery: { type: Date },
    actualDelivery:    { type: Date },
  },
  {
    timestamps: true,
    collection: "request", // √©p ƒë√∫ng collection 'request' trong DB SWP391
  }
);

// Index kh√¥ng gian cho truy v·∫•n theo v·ªã tr√≠ (ph·ª•c v·ª• b√°o gi√° theo kho·∫£ng c√°ch sau n√†y)
RequestSchema.index({ pickupLocation: "2dsphere" });
RequestSchema.index({ deliveryLocation: "2dsphere" });

// Ch·ªëng cache model & bu·ªôc d√πng collection 'request'
export default mongoose.models.Request ||
  mongoose.model("Request", RequestSchema, "request");
